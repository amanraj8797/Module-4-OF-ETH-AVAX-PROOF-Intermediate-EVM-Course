// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

contract DegenGaming {

    address public owner;
    
    // Token details
    string public tokenName = "Degen";
    string public tokenSymbol = "DGN";
    uint public totalSupply = 0;
    
    // Initiate a constructor
    constructor() {
       owner = msg.sender;
       rewards[0] = NFT("Emerald Boots", 2);
       rewards[1] = NFT("Emerald Sword", 3);
       rewards[2] = NFT("Identity Change Card", 5);
    }
    
    // Modifier to allow only owner to mint the tokens
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can mint new tokens");
        _;
    }
    
    // Mapping the address with their respective balance and NFT with the reward
    mapping(address => uint256) private balances;
    mapping(uint256 => NFT) public rewards;
    mapping(address => string[]) public redeemedRewards;
    
    struct NFT {
        string itemName;
        uint256 itemPrice;
    }

    // Functions to mint, transfer, burn, check balance, and redeem rewards
    function mintTokens(uint amount, address to) external onlyOwner {
        require(amount > 0, "Minting amount should be greater than 0");
        totalSupply += amount;
        balances[to] += amount;
    }

    function transferTokens(uint amount, address to) external {
        require(amount <= balances[msg.sender], "Amount exceeds sender's balance");
        balances[to] += amount;
        balances[msg.sender] -= amount;
    }

    function burnTokens(uint amount) external {
        require(amount <= balances[msg.sender], "Amount exceeds balance");
        balances[msg.sender] -= amount;
    }

    function checkBalance(address user) external view returns (uint) {
        return balances[user];
    }

    function redeemReward(uint rewardID) external returns (string memory) {
        require(rewards[rewardID].itemPrice <= balances[msg.sender], "Insufficient balance");
        if(rewardID != 0 && rewardID != 1 && rewardID != 2) {
            revert("Invalid reward ID");
        }
        redeemedRewards[msg.sender].push(rewards[rewardID].itemName);
        balances[msg.sender] -= rewards[rewardID].itemPrice;
        return rewards[rewardID].itemName;
    }

    function getRedeemedRewards(address user) external view returns (string[] memory) {
        return redeemedRewards[user];
    }
}
